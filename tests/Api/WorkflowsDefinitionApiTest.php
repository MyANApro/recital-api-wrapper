<?php
/**
 * WorkflowsDefinitionApiTest
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * workflows
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.9.1rc5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WorkflowsDefinitionApiTest Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowsDefinitionApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost
     *
     * Activate A Workflow.
     *
     */
    public function testActivateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost
     *
     * Create Workflow Step.
     *
     */
    public function testCreateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost
     *
     * Create Workflow Transition.
     *
     */
    public function testCreateWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWorkflowWorkflowsApiV1WorkflowsPost
     *
     * Create Workflow.
     *
     */
    public function testCreateWorkflowWorkflowsApiV1WorkflowsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete
     *
     * Delete Workflow Step.
     *
     */
    public function testDeleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete
     *
     * Delete Workflow Transition.
     *
     */
    public function testDeleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete
     *
     * Delete Workflow.
     *
     */
    public function testDeleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet
     *
     * Export Workflow.
     *
     */
    public function testExportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost
     *
     * Fork A Workflow.
     *
     */
    public function testForkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet
     *
     * Get Workflow Step.
     *
     */
    public function testGetWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet
     *
     * Get Workflow Transition.
     *
     */
    public function testGetWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for importWorkflowWorkflowsApiV1WorkflowsImportPost
     *
     * Import Workflow.
     *
     */
    public function testImportWorkflowWorkflowsApiV1WorkflowsImportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listAllActionsWorkflowsApiV1WorkflowsActionsGet
     *
     * List All Actions.
     *
     */
    public function testListAllActionsWorkflowsApiV1WorkflowsActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet
     *
     * List All Workflows By Uuid.
     *
     */
    public function testListAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listAllWorkflowsWorkflowsApiV1WorkflowsGet
     *
     * List All Workflows.
     *
     */
    public function testListAllWorkflowsWorkflowsApiV1WorkflowsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet
     *
     * List Workflow Steps.
     *
     */
    public function testListWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet
     *
     * List Workflow Transitions.
     *
     */
    public function testListWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet
     *
     * Plot Workflow.
     *
     */
    public function testPlotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost
     *
     * Publish A Workflow.
     *
     */
    public function testPublishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet
     *
     * Retrieve Workflow.
     *
     */
    public function testRetrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch
     *
     * Update Workflow Step.
     *
     */
    public function testUpdateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch
     *
     * Update Workflow Transitions.
     *
     */
    public function testUpdateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch
     *
     * Update Workflow.
     *
     */
    public function testUpdateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost
     *
     * Validate A Workflow.
     *
     */
    public function testValidateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
