<?php
/**
 * JobEntry
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * workflows
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.9.1rc5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * JobEntry Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class JobEntry implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'JobEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'status' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'workflow_id' => 'int',
        'workflow_name' => 'string',
        'parent_id' => 'int',
        'job_id' => 'int',
        'transition_id' => 'int',
        'transition_name' => 'string',
        'step_id' => 'int',
        'step_name' => 'string',
        'index' => 'int',
        'data' => 'object',
        'preliminary_data' => 'object',
        'logs' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'status' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'workflow_id' => null,
        'workflow_name' => null,
        'parent_id' => null,
        'job_id' => null,
        'transition_id' => null,
        'transition_name' => null,
        'step_id' => null,
        'step_name' => null,
        'index' => null,
        'data' => null,
        'preliminary_data' => null,
        'logs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'created_at' => false,
        'updated_at' => false,
        'workflow_id' => false,
        'workflow_name' => false,
        'parent_id' => false,
        'job_id' => false,
        'transition_id' => false,
        'transition_name' => false,
        'step_id' => false,
        'step_name' => false,
        'index' => false,
        'data' => false,
        'preliminary_data' => false,
        'logs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'workflow_id' => 'workflow_id',
        'workflow_name' => 'workflow_name',
        'parent_id' => 'parent_id',
        'job_id' => 'job_id',
        'transition_id' => 'transition_id',
        'transition_name' => 'transition_name',
        'step_id' => 'step_id',
        'step_name' => 'step_name',
        'index' => 'index',
        'data' => 'data',
        'preliminary_data' => 'preliminary_data',
        'logs' => 'logs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'workflow_id' => 'setWorkflowId',
        'workflow_name' => 'setWorkflowName',
        'parent_id' => 'setParentId',
        'job_id' => 'setJobId',
        'transition_id' => 'setTransitionId',
        'transition_name' => 'setTransitionName',
        'step_id' => 'setStepId',
        'step_name' => 'setStepName',
        'index' => 'setIndex',
        'data' => 'setData',
        'preliminary_data' => 'setPreliminaryData',
        'logs' => 'setLogs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'workflow_id' => 'getWorkflowId',
        'workflow_name' => 'getWorkflowName',
        'parent_id' => 'getParentId',
        'job_id' => 'getJobId',
        'transition_id' => 'getTransitionId',
        'transition_name' => 'getTransitionName',
        'step_id' => 'getStepId',
        'step_name' => 'getStepName',
        'index' => 'getIndex',
        'data' => 'getData',
        'preliminary_data' => 'getPreliminaryData',
        'logs' => 'getLogs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('workflow_id', $data ?? [], null);
        $this->setIfExists('workflow_name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('transition_id', $data ?? [], null);
        $this->setIfExists('transition_name', $data ?? [], null);
        $this->setIfExists('step_id', $data ?? [], null);
        $this->setIfExists('step_name', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('preliminary_data', $data ?? [], null);
        $this->setIfExists('logs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['workflow_id'] === null) {
            $invalidProperties[] = "'workflow_id' can't be null";
        }
        if ($this->container['workflow_name'] === null) {
            $invalidProperties[] = "'workflow_name' can't be null";
        }
        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus(string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt(\DateTime $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return int
     */
    public function getWorkflowId(): int
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param int $workflow_id workflow_id
     *
     * @return $this
     */
    public function setWorkflowId(int $workflow_id): static
    {
        if (is_null($workflow_id)) {
            throw new InvalidArgumentException('non-nullable workflow_id cannot be null');
        }
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets workflow_name
     *
     * @return string
     */
    public function getWorkflowName(): string
    {
        return $this->container['workflow_name'];
    }

    /**
     * Sets workflow_name
     *
     * @param string $workflow_name workflow_name
     *
     * @return $this
     */
    public function setWorkflowName(string $workflow_name): static
    {
        if (is_null($workflow_name)) {
            throw new InvalidArgumentException('non-nullable workflow_name cannot be null');
        }
        $this->container['workflow_name'] = $workflow_name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId(): ?int
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId(?int $parent_id): static
    {
        if (is_null($parent_id)) {
            throw new InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int
     */
    public function getJobId(): int
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int $job_id job_id
     *
     * @return $this
     */
    public function setJobId(int $job_id): static
    {
        if (is_null($job_id)) {
            throw new InvalidArgumentException('non-nullable job_id cannot be null');
        }
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets transition_id
     *
     * @return int|null
     */
    public function getTransitionId(): ?int
    {
        return $this->container['transition_id'];
    }

    /**
     * Sets transition_id
     *
     * @param int|null $transition_id transition_id
     *
     * @return $this
     */
    public function setTransitionId(?int $transition_id): static
    {
        if (is_null($transition_id)) {
            throw new InvalidArgumentException('non-nullable transition_id cannot be null');
        }
        $this->container['transition_id'] = $transition_id;

        return $this;
    }

    /**
     * Gets transition_name
     *
     * @return string|null
     */
    public function getTransitionName(): ?string
    {
        return $this->container['transition_name'];
    }

    /**
     * Sets transition_name
     *
     * @param string|null $transition_name transition_name
     *
     * @return $this
     */
    public function setTransitionName(?string $transition_name): static
    {
        if (is_null($transition_name)) {
            throw new InvalidArgumentException('non-nullable transition_name cannot be null');
        }
        $this->container['transition_name'] = $transition_name;

        return $this;
    }

    /**
     * Gets step_id
     *
     * @return int|null
     */
    public function getStepId(): ?int
    {
        return $this->container['step_id'];
    }

    /**
     * Sets step_id
     *
     * @param int|null $step_id step_id
     *
     * @return $this
     */
    public function setStepId(?int $step_id): static
    {
        if (is_null($step_id)) {
            throw new InvalidArgumentException('non-nullable step_id cannot be null');
        }
        $this->container['step_id'] = $step_id;

        return $this;
    }

    /**
     * Gets step_name
     *
     * @return string|null
     */
    public function getStepName(): ?string
    {
        return $this->container['step_name'];
    }

    /**
     * Sets step_name
     *
     * @param string|null $step_name step_name
     *
     * @return $this
     */
    public function setStepName(?string $step_name): static
    {
        if (is_null($step_name)) {
            throw new InvalidArgumentException('non-nullable step_name cannot be null');
        }
        $this->container['step_name'] = $step_name;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex(): ?int
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index index
     *
     * @return $this
     */
    public function setIndex(?int $index): static
    {
        if (is_null($index)) {
            throw new InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object|null
     */
    public function getData(): ?object
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object|null $data data
     *
     * @return $this
     */
    public function setData(?object $data): static
    {
        if (is_null($data)) {
            throw new InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets preliminary_data
     *
     * @return object|null
     */
    public function getPreliminaryData(): ?object
    {
        return $this->container['preliminary_data'];
    }

    /**
     * Sets preliminary_data
     *
     * @param object|null $preliminary_data preliminary_data
     *
     * @return $this
     */
    public function setPreliminaryData(?object $preliminary_data): static
    {
        if (is_null($preliminary_data)) {
            throw new InvalidArgumentException('non-nullable preliminary_data cannot be null');
        }
        $this->container['preliminary_data'] = $preliminary_data;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return string|null
     */
    public function getLogs(): ?string
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param string|null $logs logs
     *
     * @return $this
     */
    public function setLogs(?string $logs): static
    {
        if (is_null($logs)) {
            throw new InvalidArgumentException('non-nullable logs cannot be null');
        }
        $this->container['logs'] = $logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


