<?php
/**
 * ActionResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * workflows
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.9.1rc5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ActionResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ActionResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ActionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'description' => 'string',
        'action_type' => 'string',
        'action' => 'string',
        'macro_type' => '\OpenAPI\Client\Model\MacroType',
        'task_type' => '\OpenAPI\Client\Model\TaskType',
        'supports' => '\OpenAPI\Client\Model\SupportedType[]',
        'phases' => '\OpenAPI\Client\Model\ActionPhase[]',
        'config' => '\OpenAPI\Client\Model\ActionConfigResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'description' => null,
        'action_type' => null,
        'action' => null,
        'macro_type' => null,
        'task_type' => null,
        'supports' => null,
        'phases' => null,
        'config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'description' => false,
        'action_type' => false,
        'action' => false,
        'macro_type' => false,
        'task_type' => false,
        'supports' => false,
        'phases' => false,
        'config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'description' => 'description',
        'action_type' => 'action_type',
        'action' => 'action',
        'macro_type' => 'macro_type',
        'task_type' => 'task_type',
        'supports' => 'supports',
        'phases' => 'phases',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'description' => 'setDescription',
        'action_type' => 'setActionType',
        'action' => 'setAction',
        'macro_type' => 'setMacroType',
        'task_type' => 'setTaskType',
        'supports' => 'setSupports',
        'phases' => 'setPhases',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'description' => 'getDescription',
        'action_type' => 'getActionType',
        'action' => 'getAction',
        'macro_type' => 'getMacroType',
        'task_type' => 'getTaskType',
        'supports' => 'getSupports',
        'phases' => 'getPhases',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('action_type', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('macro_type', $data ?? [], null);
        $this->setIfExists('task_type', $data ?? [], null);
        $this->setIfExists('supports', $data ?? [], null);
        $this->setIfExists('phases', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['action_type'] === null) {
            $invalidProperties[] = "'action_type' can't be null";
        }
        if ($this->container['phases'] === null) {
            $invalidProperties[] = "'phases' can't be null";
        }
        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string
     */
    public function getActionType(): string
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string $action_type action_type
     *
     * @return $this
     */
    public function setActionType(string $action_type): static
    {
        if (is_null($action_type)) {
            throw new InvalidArgumentException('non-nullable action_type cannot be null');
        }
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction(): ?string
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return $this
     */
    public function setAction(?string $action): static
    {
        if (is_null($action)) {
            throw new InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets macro_type
     *
     * @return \OpenAPI\Client\Model\MacroType|null
     */
    public function getMacroType(): ?\OpenAPI\Client\Model\MacroType
    {
        return $this->container['macro_type'];
    }

    /**
     * Sets macro_type
     *
     * @param \OpenAPI\Client\Model\MacroType|null $macro_type macro_type
     *
     * @return $this
     */
    public function setMacroType(?\OpenAPI\Client\Model\MacroType $macro_type): static
    {
        if (is_null($macro_type)) {
            throw new InvalidArgumentException('non-nullable macro_type cannot be null');
        }
        $this->container['macro_type'] = $macro_type;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return \OpenAPI\Client\Model\TaskType|null
     */
    public function getTaskType(): ?\OpenAPI\Client\Model\TaskType
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param \OpenAPI\Client\Model\TaskType|null $task_type task_type
     *
     * @return $this
     */
    public function setTaskType(?\OpenAPI\Client\Model\TaskType $task_type): static
    {
        if (is_null($task_type)) {
            throw new InvalidArgumentException('non-nullable task_type cannot be null');
        }
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets supports
     *
     * @return \OpenAPI\Client\Model\SupportedType[]|null
     */
    public function getSupports(): ?array
    {
        return $this->container['supports'];
    }

    /**
     * Sets supports
     *
     * @param \OpenAPI\Client\Model\SupportedType[]|null $supports supports
     *
     * @return $this
     */
    public function setSupports(?array $supports): static
    {
        if (is_null($supports)) {
            throw new InvalidArgumentException('non-nullable supports cannot be null');
        }


        $this->container['supports'] = $supports;

        return $this;
    }

    /**
     * Gets phases
     *
     * @return \OpenAPI\Client\Model\ActionPhase[]
     */
    public function getPhases(): array
    {
        return $this->container['phases'];
    }

    /**
     * Sets phases
     *
     * @param \OpenAPI\Client\Model\ActionPhase[] $phases phases
     *
     * @return $this
     */
    public function setPhases(array $phases): static
    {
        if (is_null($phases)) {
            throw new InvalidArgumentException('non-nullable phases cannot be null');
        }
        $this->container['phases'] = $phases;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\ActionConfigResponse
     */
    public function getConfig(): \OpenAPI\Client\Model\ActionConfigResponse
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\ActionConfigResponse $config config
     *
     * @return $this
     */
    public function setConfig(\OpenAPI\Client\Model\ActionConfigResponse $config): static
    {
        if (is_null($config)) {
            throw new InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


