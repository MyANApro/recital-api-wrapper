<?php
/**
 * WorkflowJobsApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * workflows
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.9.1rc5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WorkflowJobsApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowJobsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost' => [
            'application/json',
        ],
        'createJobWorkflowsApiV1JobsPost' => [
            'multipart/form-data',
        ],
        'downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet' => [
            'application/json',
        ],
        'downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet' => [
            'application/json',
        ],
        'executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost' => [
            'application/json',
        ],
        'getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet' => [
            'application/json',
        ],
        'getJobWorkflowsApiV1JobsJobIdGet' => [
            'application/json',
        ],
        'listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet' => [
            'application/json',
        ],
        'listJobFilesWorkflowsApiV1JobsJobIdFilesGet' => [
            'application/json',
        ],
        'listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet' => [
            'application/json',
        ],
        'listJobsWorkflowsApiV1JobsGet' => [
            'application/json',
        ],
        'plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet' => [
            'application/json',
        ],
        'plotJobWorkflowsApiV1JobsJobIdPlotGet' => [
            'application/json',
        ],
        'startJobWorkflowsApiV1JobsJobIdStartPost' => [
            'application/json',
        ],
        'uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost
     *
     * Action Callback
     *
     * @param  int $job_id job_id (required)
     * @param  int $entry_id entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'][0]
    ): mixed
    {
        list($response) = $this->actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostWithHttpInfo($job_id, $entry_id, $contentType);
        return $response;
    }

    /**
     * Operation actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostWithHttpInfo
     *
     * Action Callback
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostWithHttpInfo(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'][0]
    ): array
    {
        $request = $this->actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostRequest($job_id, $entry_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostAsync
     *
     * Action Callback
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostAsync(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'][0]
    ): PromiseInterface
    {
        return $this->actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostAsyncWithHttpInfo($job_id, $entry_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostAsyncWithHttpInfo
     *
     * Action Callback
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostAsyncWithHttpInfo(
        $job_id,
        $entry_id,
        string $contentType = self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostRequest($job_id, $entry_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPostRequest(
        $job_id,
        $entry_id,
        string $contentType = self::contentTypes['actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'
            );
        }

        // verify the required parameter 'entry_id' is set
        if ($entry_id === null || (is_array($entry_id) && count($entry_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $entry_id when calling actionCallbackWorkflowsApiV1JobsJobIdActionCallbackPost'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/action-callback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entry_id,
            'entry_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJobWorkflowsApiV1JobsPost
     *
     * Create Job
     *
     * @param  int|null $workflow_id workflow_id (optional)
     * @param  string|null $workflow_uuid workflow_uuid (optional)
     * @param  bool|null $start start (optional, default to true)
     * @param  string|null $custom_metadata custom_metadata (optional)
     * @param  bool|null $is_test is_test (optional, default to false)
     * @param  string|null $webhook_url Webhook URL (optional)
     * @param  string|null $webhook_token Webhook Authorization Token (optional)
     * @param  \OpenAPI\Client\Model\WebhookAuthType|null $webhook_auth_type Webhook Authorization Type (optional)
     * @param  string|null $webhook_auth_header Webhook Authorization Header Name (when type&#x3D;header or type&#x3D;bearer) (optional, default to 'Authorization')
     * @param  string|null $webhook_auth_param Webhook Authorization Parameter Name (when type&#x3D;param) (optional, default to 'token')
     * @param  \SplFileObject|null $data Initial job data as JSON (optional)
     * @param  \SplFileObject|null $file Generic file upload (optional)
     * @param  \SplFileObject|null $email Email payload (.eml extension) (optional)
     * @param  \SplFileObject[]|null $attachments Email attachments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJobWorkflowsApiV1JobsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createJobWorkflowsApiV1JobsPost(
        ?int $workflow_id = null,
        ?string $workflow_uuid = null,
        ?bool $start = true,
        ?string $custom_metadata = null,
        ?bool $is_test = false,
        ?string $webhook_url = null,
        ?string $webhook_token = null,
        ?\OpenAPI\Client\Model\WebhookAuthType $webhook_auth_type = null,
        ?string $webhook_auth_header = 'Authorization',
        ?string $webhook_auth_param = 'token',
        ?\SplFileObject $data = null,
        ?\SplFileObject $file = null,
        ?\SplFileObject $email = null,
        ?array $attachments = null,
        string $contentType = self::contentTypes['createJobWorkflowsApiV1JobsPost'][0]
    ): \OpenAPI\Client\Model\JobResponse
    {
        list($response) = $this->createJobWorkflowsApiV1JobsPostWithHttpInfo($workflow_id, $workflow_uuid, $start, $custom_metadata, $is_test, $webhook_url, $webhook_token, $webhook_auth_type, $webhook_auth_header, $webhook_auth_param, $data, $file, $email, $attachments, $contentType);
        return $response;
    }

    /**
     * Operation createJobWorkflowsApiV1JobsPostWithHttpInfo
     *
     * Create Job
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $workflow_uuid (optional)
     * @param  bool|null $start (optional, default to true)
     * @param  string|null $custom_metadata (optional)
     * @param  bool|null $is_test (optional, default to false)
     * @param  string|null $webhook_url Webhook URL (optional)
     * @param  string|null $webhook_token Webhook Authorization Token (optional)
     * @param  \OpenAPI\Client\Model\WebhookAuthType|null $webhook_auth_type Webhook Authorization Type (optional)
     * @param  string|null $webhook_auth_header Webhook Authorization Header Name (when type&#x3D;header or type&#x3D;bearer) (optional, default to 'Authorization')
     * @param  string|null $webhook_auth_param Webhook Authorization Parameter Name (when type&#x3D;param) (optional, default to 'token')
     * @param  \SplFileObject|null $data Initial job data as JSON (optional)
     * @param  \SplFileObject|null $file Generic file upload (optional)
     * @param  \SplFileObject|null $email Email payload (.eml extension) (optional)
     * @param  \SplFileObject[]|null $attachments Email attachments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJobWorkflowsApiV1JobsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJobWorkflowsApiV1JobsPostWithHttpInfo(
        ?int $workflow_id = null,
        ?string $workflow_uuid = null,
        ?bool $start = true,
        ?string $custom_metadata = null,
        ?bool $is_test = false,
        ?string $webhook_url = null,
        ?string $webhook_token = null,
        ?\OpenAPI\Client\Model\WebhookAuthType $webhook_auth_type = null,
        ?string $webhook_auth_header = 'Authorization',
        ?string $webhook_auth_param = 'token',
        ?\SplFileObject $data = null,
        ?\SplFileObject $file = null,
        ?\SplFileObject $email = null,
        ?array $attachments = null,
        string $contentType = self::contentTypes['createJobWorkflowsApiV1JobsPost'][0]
    ): array
    {
        $request = $this->createJobWorkflowsApiV1JobsPostRequest($workflow_id, $workflow_uuid, $start, $custom_metadata, $is_test, $webhook_url, $webhook_token, $webhook_auth_type, $webhook_auth_header, $webhook_auth_param, $data, $file, $email, $attachments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJobWorkflowsApiV1JobsPostAsync
     *
     * Create Job
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $workflow_uuid (optional)
     * @param  bool|null $start (optional, default to true)
     * @param  string|null $custom_metadata (optional)
     * @param  bool|null $is_test (optional, default to false)
     * @param  string|null $webhook_url Webhook URL (optional)
     * @param  string|null $webhook_token Webhook Authorization Token (optional)
     * @param  \OpenAPI\Client\Model\WebhookAuthType|null $webhook_auth_type Webhook Authorization Type (optional)
     * @param  string|null $webhook_auth_header Webhook Authorization Header Name (when type&#x3D;header or type&#x3D;bearer) (optional, default to 'Authorization')
     * @param  string|null $webhook_auth_param Webhook Authorization Parameter Name (when type&#x3D;param) (optional, default to 'token')
     * @param  \SplFileObject|null $data Initial job data as JSON (optional)
     * @param  \SplFileObject|null $file Generic file upload (optional)
     * @param  \SplFileObject|null $email Email payload (.eml extension) (optional)
     * @param  \SplFileObject[]|null $attachments Email attachments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJobWorkflowsApiV1JobsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createJobWorkflowsApiV1JobsPostAsync(
        ?int $workflow_id = null,
        ?string $workflow_uuid = null,
        ?bool $start = true,
        ?string $custom_metadata = null,
        ?bool $is_test = false,
        ?string $webhook_url = null,
        ?string $webhook_token = null,
        ?\OpenAPI\Client\Model\WebhookAuthType $webhook_auth_type = null,
        ?string $webhook_auth_header = 'Authorization',
        ?string $webhook_auth_param = 'token',
        ?\SplFileObject $data = null,
        ?\SplFileObject $file = null,
        ?\SplFileObject $email = null,
        ?array $attachments = null,
        string $contentType = self::contentTypes['createJobWorkflowsApiV1JobsPost'][0]
    ): PromiseInterface
    {
        return $this->createJobWorkflowsApiV1JobsPostAsyncWithHttpInfo($workflow_id, $workflow_uuid, $start, $custom_metadata, $is_test, $webhook_url, $webhook_token, $webhook_auth_type, $webhook_auth_header, $webhook_auth_param, $data, $file, $email, $attachments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJobWorkflowsApiV1JobsPostAsyncWithHttpInfo
     *
     * Create Job
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $workflow_uuid (optional)
     * @param  bool|null $start (optional, default to true)
     * @param  string|null $custom_metadata (optional)
     * @param  bool|null $is_test (optional, default to false)
     * @param  string|null $webhook_url Webhook URL (optional)
     * @param  string|null $webhook_token Webhook Authorization Token (optional)
     * @param  \OpenAPI\Client\Model\WebhookAuthType|null $webhook_auth_type Webhook Authorization Type (optional)
     * @param  string|null $webhook_auth_header Webhook Authorization Header Name (when type&#x3D;header or type&#x3D;bearer) (optional, default to 'Authorization')
     * @param  string|null $webhook_auth_param Webhook Authorization Parameter Name (when type&#x3D;param) (optional, default to 'token')
     * @param  \SplFileObject|null $data Initial job data as JSON (optional)
     * @param  \SplFileObject|null $file Generic file upload (optional)
     * @param  \SplFileObject|null $email Email payload (.eml extension) (optional)
     * @param  \SplFileObject[]|null $attachments Email attachments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJobWorkflowsApiV1JobsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createJobWorkflowsApiV1JobsPostAsyncWithHttpInfo(
        $workflow_id = null,
        $workflow_uuid = null,
        $start = true,
        $custom_metadata = null,
        $is_test = false,
        $webhook_url = null,
        $webhook_token = null,
        $webhook_auth_type = null,
        $webhook_auth_header = 'Authorization',
        $webhook_auth_param = 'token',
        $data = null,
        $file = null,
        $email = null,
        $attachments = null,
        string $contentType = self::contentTypes['createJobWorkflowsApiV1JobsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobResponse';
        $request = $this->createJobWorkflowsApiV1JobsPostRequest($workflow_id, $workflow_uuid, $start, $custom_metadata, $is_test, $webhook_url, $webhook_token, $webhook_auth_type, $webhook_auth_header, $webhook_auth_param, $data, $file, $email, $attachments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJobWorkflowsApiV1JobsPost'
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $workflow_uuid (optional)
     * @param  bool|null $start (optional, default to true)
     * @param  string|null $custom_metadata (optional)
     * @param  bool|null $is_test (optional, default to false)
     * @param  string|null $webhook_url Webhook URL (optional)
     * @param  string|null $webhook_token Webhook Authorization Token (optional)
     * @param  \OpenAPI\Client\Model\WebhookAuthType|null $webhook_auth_type Webhook Authorization Type (optional)
     * @param  string|null $webhook_auth_header Webhook Authorization Header Name (when type&#x3D;header or type&#x3D;bearer) (optional, default to 'Authorization')
     * @param  string|null $webhook_auth_param Webhook Authorization Parameter Name (when type&#x3D;param) (optional, default to 'token')
     * @param  \SplFileObject|null $data Initial job data as JSON (optional)
     * @param  \SplFileObject|null $file Generic file upload (optional)
     * @param  \SplFileObject|null $email Email payload (.eml extension) (optional)
     * @param  \SplFileObject[]|null $attachments Email attachments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJobWorkflowsApiV1JobsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJobWorkflowsApiV1JobsPostRequest(
        $workflow_id = null,
        $workflow_uuid = null,
        $start = true,
        $custom_metadata = null,
        $is_test = false,
        $webhook_url = null,
        $webhook_token = null,
        $webhook_auth_type = null,
        $webhook_auth_header = 'Authorization',
        $webhook_auth_param = 'token',
        $data = null,
        $file = null,
        $email = null,
        $attachments = null,
        string $contentType = self::contentTypes['createJobWorkflowsApiV1JobsPost'][0]
    ): Request
    {




        if ($custom_metadata !== null && strlen($custom_metadata) > 512) {
            throw new InvalidArgumentException('invalid length for "$custom_metadata" when calling WorkflowJobsApi.createJobWorkflowsApiV1JobsPost, must be smaller than or equal to 512.');
        }
        











        $resourcePath = '/workflows/api/v1/jobs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_id,
            'workflow_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_uuid,
            'workflow_uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_metadata,
            'custom_metadata', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_test,
            'is_test', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_url,
            'webhook_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_token,
            'webhook_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_auth_type,
            'webhook_auth_type', // param base name
            'WebhookAuthType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_auth_header,
            'webhook_auth_header', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webhook_auth_param,
            'webhook_auth_param', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        if ($data !== null) {
            $multipart = true;
            $formParams['data'] = [];
            $paramFiles = is_array($data) ? $data : [$data];
            foreach ($paramFiles as $paramFile) {
                $formParams['data'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }
        // form params
        if ($email !== null) {
            $multipart = true;
            $formParams['email'] = [];
            $paramFiles = is_array($email) ? $email : [$email];
            foreach ($paramFiles as $paramFile) {
                $formParams['email'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }
        // form params
        if ($attachments !== null) {
            $multipart = true;
            $formParams['attachments'] = [];
            $paramFiles = is_array($attachments) ? $attachments : [$attachments];
            foreach ($paramFiles as $paramFile) {
                $formParams['attachments'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet
     *
     * Download Job File
     *
     * @param  int $job_id job_id (required)
     * @param  int $file_id file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet(
        int $job_id,
        int $file_id,
        string $contentType = self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'][0]
    ): mixed
    {
        list($response) = $this->downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetWithHttpInfo($job_id, $file_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetWithHttpInfo
     *
     * Download Job File
     *
     * @param  int $job_id (required)
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetWithHttpInfo(
        int $job_id,
        int $file_id,
        string $contentType = self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'][0]
    ): array
    {
        $request = $this->downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetRequest($job_id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetAsync
     *
     * Download Job File
     *
     * @param  int $job_id (required)
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetAsync(
        int $job_id,
        int $file_id,
        string $contentType = self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'][0]
    ): PromiseInterface
    {
        return $this->downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetAsyncWithHttpInfo($job_id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetAsyncWithHttpInfo
     *
     * Download Job File
     *
     * @param  int $job_id (required)
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetAsyncWithHttpInfo(
        $job_id,
        $file_id,
        string $contentType = self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetRequest($job_id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'
     *
     * @param  int $job_id (required)
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGetRequest(
        $job_id,
        $file_id,
        string $contentType = self::contentTypes['downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $file_id when calling downloadJobFileWorkflowsApiV1JobsJobIdFilesFileIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet
     *
     * Download Job Files
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet(
        int $job_id,
        string $contentType = self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'][0]
    ): mixed
    {
        list($response) = $this->downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetWithHttpInfo
     *
     * Download Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'][0]
    ): array
    {
        $request = $this->downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetAsync
     *
     * Download Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetAsync(
        int $job_id,
        string $contentType = self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'][0]
    ): PromiseInterface
    {
        return $this->downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetAsyncWithHttpInfo
     *
     * Download Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGetRequest(
        $job_id,
        string $contentType = self::contentTypes['downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling downloadJobFilesWorkflowsApiV1JobsJobIdFilesDownloadGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/files/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost
     *
     * Execute Transition On Job
     *
     * @param  int $job_id job_id (required)
     * @param  int $transition_id transition_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost(
        int $job_id,
        int $transition_id,
        string $contentType = self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'][0]
    ): mixed
    {
        list($response) = $this->executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostWithHttpInfo($job_id, $transition_id, $contentType);
        return $response;
    }

    /**
     * Operation executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostWithHttpInfo
     *
     * Execute Transition On Job
     *
     * @param  int $job_id (required)
     * @param  int $transition_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostWithHttpInfo(
        int $job_id,
        int $transition_id,
        string $contentType = self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'][0]
    ): array
    {
        $request = $this->executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostRequest($job_id, $transition_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostAsync
     *
     * Execute Transition On Job
     *
     * @param  int $job_id (required)
     * @param  int $transition_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostAsync(
        int $job_id,
        int $transition_id,
        string $contentType = self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'][0]
    ): PromiseInterface
    {
        return $this->executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostAsyncWithHttpInfo($job_id, $transition_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostAsyncWithHttpInfo
     *
     * Execute Transition On Job
     *
     * @param  int $job_id (required)
     * @param  int $transition_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostAsyncWithHttpInfo(
        $job_id,
        $transition_id,
        string $contentType = self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostRequest($job_id, $transition_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'
     *
     * @param  int $job_id (required)
     * @param  int $transition_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePostRequest(
        $job_id,
        $transition_id,
        string $contentType = self::contentTypes['executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'
            );
        }

        // verify the required parameter 'transition_id' is set
        if ($transition_id === null || (is_array($transition_id) && count($transition_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_id when calling executeTransitionOnJobWorkflowsApiV1JobsJobIdTransitionsTransitionIdExecutePost'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/transitions/{transition_id}/execute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($transition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transition_id' . '}',
                ObjectSerializer::toPathValue($transition_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet
     *
     * Get Job History Entry
     *
     * @param  int $job_id job_id (required)
     * @param  int $entry_id entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'][0]
    ): mixed
    {
        list($response) = $this->getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetWithHttpInfo($job_id, $entry_id, $contentType);
        return $response;
    }

    /**
     * Operation getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetWithHttpInfo
     *
     * Get Job History Entry
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetWithHttpInfo(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'][0]
    ): array
    {
        $request = $this->getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetRequest($job_id, $entry_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetAsync
     *
     * Get Job History Entry
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetAsync(
        int $job_id,
        int $entry_id,
        string $contentType = self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'][0]
    ): PromiseInterface
    {
        return $this->getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetAsyncWithHttpInfo($job_id, $entry_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetAsyncWithHttpInfo
     *
     * Get Job History Entry
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetAsyncWithHttpInfo(
        $job_id,
        $entry_id,
        string $contentType = self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetRequest($job_id, $entry_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'
     *
     * @param  int $job_id (required)
     * @param  int $entry_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGetRequest(
        $job_id,
        $entry_id,
        string $contentType = self::contentTypes['getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'
            );
        }

        // verify the required parameter 'entry_id' is set
        if ($entry_id === null || (is_array($entry_id) && count($entry_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $entry_id when calling getJobHistoryEntryWorkflowsApiV1JobsJobIdHistoryEntryIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/history/{entry_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entry_id' . '}',
                ObjectSerializer::toPathValue($entry_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobWorkflowsApiV1JobsJobIdGet
     *
     * Get Job
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getJobWorkflowsApiV1JobsJobIdGet(
        int $job_id,
        string $contentType = self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'][0]
    ): \OpenAPI\Client\Model\JobResponse
    {
        list($response) = $this->getJobWorkflowsApiV1JobsJobIdGetWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation getJobWorkflowsApiV1JobsJobIdGetWithHttpInfo
     *
     * Get Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobWorkflowsApiV1JobsJobIdGetWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'][0]
    ): array
    {
        $request = $this->getJobWorkflowsApiV1JobsJobIdGetRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobWorkflowsApiV1JobsJobIdGetAsync
     *
     * Get Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJobWorkflowsApiV1JobsJobIdGetAsync(
        int $job_id,
        string $contentType = self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'][0]
    ): PromiseInterface
    {
        return $this->getJobWorkflowsApiV1JobsJobIdGetAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobWorkflowsApiV1JobsJobIdGetAsyncWithHttpInfo
     *
     * Get Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJobWorkflowsApiV1JobsJobIdGetAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobResponse';
        $request = $this->getJobWorkflowsApiV1JobsJobIdGetRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobWorkflowsApiV1JobsJobIdGet'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobWorkflowsApiV1JobsJobIdGetRequest(
        $job_id,
        string $contentType = self::contentTypes['getJobWorkflowsApiV1JobsJobIdGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling getJobWorkflowsApiV1JobsJobIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet
     *
     * List Available Transitions
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransitionResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet(
        int $job_id,
        string $contentType = self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'][0]
    ): array
    {
        list($response) = $this->listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetWithHttpInfo
     *
     * List Available Transitions
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransitionResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'][0]
    ): array
    {
        $request = $this->listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\TransitionResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransitionResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransitionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransitionResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransitionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetAsync
     *
     * List Available Transitions
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetAsync(
        int $job_id,
        string $contentType = self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'][0]
    ): PromiseInterface
    {
        return $this->listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetAsyncWithHttpInfo
     *
     * List Available Transitions
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransitionResponse[]';
        $request = $this->listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGetRequest(
        $job_id,
        string $contentType = self::contentTypes['listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling listAvailableTransitionsWorkflowsApiV1JobsJobIdTransitionsGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/transitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listJobFilesWorkflowsApiV1JobsJobIdFilesGet
     *
     * List Job Files
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobFileResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listJobFilesWorkflowsApiV1JobsJobIdFilesGet(
        int $job_id,
        string $contentType = self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'][0]
    ): array
    {
        list($response) = $this->listJobFilesWorkflowsApiV1JobsJobIdFilesGetWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation listJobFilesWorkflowsApiV1JobsJobIdFilesGetWithHttpInfo
     *
     * List Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobFileResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobFilesWorkflowsApiV1JobsJobIdFilesGetWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'][0]
    ): array
    {
        $request = $this->listJobFilesWorkflowsApiV1JobsJobIdFilesGetRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobFileResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobFileResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobFileResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobFileResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobFileResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listJobFilesWorkflowsApiV1JobsJobIdFilesGetAsync
     *
     * List Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobFilesWorkflowsApiV1JobsJobIdFilesGetAsync(
        int $job_id,
        string $contentType = self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'][0]
    ): PromiseInterface
    {
        return $this->listJobFilesWorkflowsApiV1JobsJobIdFilesGetAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listJobFilesWorkflowsApiV1JobsJobIdFilesGetAsyncWithHttpInfo
     *
     * List Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobFilesWorkflowsApiV1JobsJobIdFilesGetAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobFileResponse[]';
        $request = $this->listJobFilesWorkflowsApiV1JobsJobIdFilesGetRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listJobFilesWorkflowsApiV1JobsJobIdFilesGet'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listJobFilesWorkflowsApiV1JobsJobIdFilesGetRequest(
        $job_id,
        string $contentType = self::contentTypes['listJobFilesWorkflowsApiV1JobsJobIdFilesGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling listJobFilesWorkflowsApiV1JobsJobIdFilesGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/files/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet
     *
     * List Job History
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobEntry[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet(
        int $job_id,
        string $contentType = self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'][0]
    ): array
    {
        list($response) = $this->listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetWithHttpInfo
     *
     * List Job History
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobEntry[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'][0]
    ): array
    {
        $request = $this->listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobEntry[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobEntry[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobEntry[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobEntry[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetAsync
     *
     * List Job History
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetAsync(
        int $job_id,
        string $contentType = self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'][0]
    ): PromiseInterface
    {
        return $this->listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetAsyncWithHttpInfo
     *
     * List Job History
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobEntry[]';
        $request = $this->listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listJobHistoryWorkflowsApiV1JobsJobIdHistoryGetRequest(
        $job_id,
        string $contentType = self::contentTypes['listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling listJobHistoryWorkflowsApiV1JobsJobIdHistoryGet'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/history/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listJobsWorkflowsApiV1JobsGet
     *
     * List Jobs
     *
     * @param  int|null $workflow_id workflow_id (optional)
     * @param  string|null $uuid uuid (optional)
     * @param  string|null $workflow_filter workflow_filter (optional)
     * @param  string|null $step_filter step_filter (optional)
     * @param  string|null $states states (optional)
     * @param  bool|null $sort_desc sort_desc (optional)
     * @param  int|null $limit limit (optional, default to 100)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobsWorkflowsApiV1JobsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listJobsWorkflowsApiV1JobsGet(
        ?int $workflow_id = null,
        ?string $uuid = null,
        ?string $workflow_filter = null,
        ?string $step_filter = null,
        ?string $states = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listJobsWorkflowsApiV1JobsGet'][0]
    ): array
    {
        list($response) = $this->listJobsWorkflowsApiV1JobsGetWithHttpInfo($workflow_id, $uuid, $workflow_filter, $step_filter, $states, $sort_desc, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listJobsWorkflowsApiV1JobsGetWithHttpInfo
     *
     * List Jobs
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $uuid (optional)
     * @param  string|null $workflow_filter (optional)
     * @param  string|null $step_filter (optional)
     * @param  string|null $states (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobsWorkflowsApiV1JobsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobsWorkflowsApiV1JobsGetWithHttpInfo(
        ?int $workflow_id = null,
        ?string $uuid = null,
        ?string $workflow_filter = null,
        ?string $step_filter = null,
        ?string $states = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listJobsWorkflowsApiV1JobsGet'][0]
    ): array
    {
        $request = $this->listJobsWorkflowsApiV1JobsGetRequest($workflow_id, $uuid, $workflow_filter, $step_filter, $states, $sort_desc, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listJobsWorkflowsApiV1JobsGetAsync
     *
     * List Jobs
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $uuid (optional)
     * @param  string|null $workflow_filter (optional)
     * @param  string|null $step_filter (optional)
     * @param  string|null $states (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobsWorkflowsApiV1JobsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobsWorkflowsApiV1JobsGetAsync(
        ?int $workflow_id = null,
        ?string $uuid = null,
        ?string $workflow_filter = null,
        ?string $step_filter = null,
        ?string $states = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listJobsWorkflowsApiV1JobsGet'][0]
    ): PromiseInterface
    {
        return $this->listJobsWorkflowsApiV1JobsGetAsyncWithHttpInfo($workflow_id, $uuid, $workflow_filter, $step_filter, $states, $sort_desc, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listJobsWorkflowsApiV1JobsGetAsyncWithHttpInfo
     *
     * List Jobs
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $uuid (optional)
     * @param  string|null $workflow_filter (optional)
     * @param  string|null $step_filter (optional)
     * @param  string|null $states (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobsWorkflowsApiV1JobsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listJobsWorkflowsApiV1JobsGetAsyncWithHttpInfo(
        $workflow_id = null,
        $uuid = null,
        $workflow_filter = null,
        $step_filter = null,
        $states = null,
        $sort_desc = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listJobsWorkflowsApiV1JobsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobResponse[]';
        $request = $this->listJobsWorkflowsApiV1JobsGetRequest($workflow_id, $uuid, $workflow_filter, $step_filter, $states, $sort_desc, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listJobsWorkflowsApiV1JobsGet'
     *
     * @param  int|null $workflow_id (optional)
     * @param  string|null $uuid (optional)
     * @param  string|null $workflow_filter (optional)
     * @param  string|null $step_filter (optional)
     * @param  string|null $states (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listJobsWorkflowsApiV1JobsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listJobsWorkflowsApiV1JobsGetRequest(
        $workflow_id = null,
        $uuid = null,
        $workflow_filter = null,
        $step_filter = null,
        $states = null,
        $sort_desc = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listJobsWorkflowsApiV1JobsGet'][0]
    ): Request
    {








        if ($offset !== null && $offset < 0) {
            throw new InvalidArgumentException('invalid value for "$offset" when calling WorkflowJobsApi.listJobsWorkflowsApiV1JobsGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/workflows/api/v1/jobs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_id,
            'workflow_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uuid,
            'uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_filter,
            'workflow_filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $step_filter,
            'step_filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $states,
            'states', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_desc,
            'sort_desc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet
     *
     * Plot Job History
     *
     * @param  int $job_id job_id (required)
     * @param  string|null $direction direction (optional, default to 'TB')
     * @param  string|null $format format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'][0]
    ): mixed
    {
        list($response) = $this->plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetWithHttpInfo($job_id, $direction, $format, $contentType);
        return $response;
    }

    /**
     * Operation plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetWithHttpInfo
     *
     * Plot Job History
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetWithHttpInfo(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'][0]
    ): array
    {
        $request = $this->plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetRequest($job_id, $direction, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetAsync
     *
     * Plot Job History
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetAsync(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'][0]
    ): PromiseInterface
    {
        return $this->plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetAsyncWithHttpInfo($job_id, $direction, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetAsyncWithHttpInfo
     *
     * Plot Job History
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetAsyncWithHttpInfo(
        $job_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetRequest($job_id, $direction, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGetRequest(
        $job_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling plotJobHistoryWorkflowsApiV1JobsJobIdHistoryPlotGet'
            );
        }




        $resourcePath = '/workflows/api/v1/jobs/{job_id}/history/plot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation plotJobWorkflowsApiV1JobsJobIdPlotGet
     *
     * Plot Job
     *
     * @param  int $job_id job_id (required)
     * @param  string|null $direction direction (optional, default to 'TB')
     * @param  string|null $format format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function plotJobWorkflowsApiV1JobsJobIdPlotGet(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'][0]
    ): mixed
    {
        list($response) = $this->plotJobWorkflowsApiV1JobsJobIdPlotGetWithHttpInfo($job_id, $direction, $format, $contentType);
        return $response;
    }

    /**
     * Operation plotJobWorkflowsApiV1JobsJobIdPlotGetWithHttpInfo
     *
     * Plot Job
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function plotJobWorkflowsApiV1JobsJobIdPlotGetWithHttpInfo(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'][0]
    ): array
    {
        $request = $this->plotJobWorkflowsApiV1JobsJobIdPlotGetRequest($job_id, $direction, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation plotJobWorkflowsApiV1JobsJobIdPlotGetAsync
     *
     * Plot Job
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotJobWorkflowsApiV1JobsJobIdPlotGetAsync(
        int $job_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'][0]
    ): PromiseInterface
    {
        return $this->plotJobWorkflowsApiV1JobsJobIdPlotGetAsyncWithHttpInfo($job_id, $direction, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation plotJobWorkflowsApiV1JobsJobIdPlotGetAsyncWithHttpInfo
     *
     * Plot Job
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotJobWorkflowsApiV1JobsJobIdPlotGetAsyncWithHttpInfo(
        $job_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->plotJobWorkflowsApiV1JobsJobIdPlotGetRequest($job_id, $direction, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'plotJobWorkflowsApiV1JobsJobIdPlotGet'
     *
     * @param  int $job_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function plotJobWorkflowsApiV1JobsJobIdPlotGetRequest(
        $job_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotJobWorkflowsApiV1JobsJobIdPlotGet'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling plotJobWorkflowsApiV1JobsJobIdPlotGet'
            );
        }




        $resourcePath = '/workflows/api/v1/jobs/{job_id}/plot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startJobWorkflowsApiV1JobsJobIdStartPost
     *
     * Start Job
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function startJobWorkflowsApiV1JobsJobIdStartPost(
        int $job_id,
        string $contentType = self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'][0]
    ): \OpenAPI\Client\Model\JobResponse
    {
        list($response) = $this->startJobWorkflowsApiV1JobsJobIdStartPostWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation startJobWorkflowsApiV1JobsJobIdStartPostWithHttpInfo
     *
     * Start Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function startJobWorkflowsApiV1JobsJobIdStartPostWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'][0]
    ): array
    {
        $request = $this->startJobWorkflowsApiV1JobsJobIdStartPostRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startJobWorkflowsApiV1JobsJobIdStartPostAsync
     *
     * Start Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startJobWorkflowsApiV1JobsJobIdStartPostAsync(
        int $job_id,
        string $contentType = self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'][0]
    ): PromiseInterface
    {
        return $this->startJobWorkflowsApiV1JobsJobIdStartPostAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startJobWorkflowsApiV1JobsJobIdStartPostAsyncWithHttpInfo
     *
     * Start Job
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startJobWorkflowsApiV1JobsJobIdStartPostAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobResponse';
        $request = $this->startJobWorkflowsApiV1JobsJobIdStartPostRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startJobWorkflowsApiV1JobsJobIdStartPost'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startJobWorkflowsApiV1JobsJobIdStartPostRequest(
        $job_id,
        string $contentType = self::contentTypes['startJobWorkflowsApiV1JobsJobIdStartPost'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling startJobWorkflowsApiV1JobsJobIdStartPost'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost
     *
     * Upload Job Files
     *
     * @param  int $job_id job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobFileResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost(
        int $job_id,
        string $contentType = self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'][0]
    ): array
    {
        list($response) = $this->uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostWithHttpInfo($job_id, $contentType);
        return $response;
    }

    /**
     * Operation uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostWithHttpInfo
     *
     * Upload Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobFileResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostWithHttpInfo(
        int $job_id,
        string $contentType = self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'][0]
    ): array
    {
        $request = $this->uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostRequest($job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\JobFileResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobFileResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobFileResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobFileResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobFileResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostAsync
     *
     * Upload Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostAsync(
        int $job_id,
        string $contentType = self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'][0]
    ): PromiseInterface
    {
        return $this->uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostAsyncWithHttpInfo($job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostAsyncWithHttpInfo
     *
     * Upload Job Files
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostAsyncWithHttpInfo(
        $job_id,
        string $contentType = self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JobFileResponse[]';
        $request = $this->uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostRequest($job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'
     *
     * @param  int $job_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadJobFilesWorkflowsApiV1JobsJobIdFilesPostRequest(
        $job_id,
        string $contentType = self::contentTypes['uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'][0]
    ): Request
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $job_id when calling uploadJobFilesWorkflowsApiV1JobsJobIdFilesPost'
            );
        }


        $resourcePath = '/workflows/api/v1/jobs/{job_id}/files/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
