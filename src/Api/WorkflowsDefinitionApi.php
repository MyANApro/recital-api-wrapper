<?php
/**
 * WorkflowsDefinitionApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * workflows
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.9.1rc5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WorkflowsDefinitionApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowsDefinitionApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost' => [
            'application/json',
        ],
        'createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost' => [
            'application/json',
        ],
        'createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost' => [
            'application/json',
        ],
        'createWorkflowWorkflowsApiV1WorkflowsPost' => [
            'application/json',
        ],
        'deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete' => [
            'application/json',
        ],
        'deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete' => [
            'application/json',
        ],
        'deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete' => [
            'application/json',
        ],
        'exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet' => [
            'application/json',
        ],
        'forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost' => [
            'application/json',
        ],
        'getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet' => [
            'application/json',
        ],
        'getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet' => [
            'application/json',
        ],
        'importWorkflowWorkflowsApiV1WorkflowsImportPost' => [
            'multipart/form-data',
        ],
        'listAllActionsWorkflowsApiV1WorkflowsActionsGet' => [
            'application/json',
        ],
        'listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet' => [
            'application/json',
        ],
        'listAllWorkflowsWorkflowsApiV1WorkflowsGet' => [
            'application/json',
        ],
        'listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet' => [
            'application/json',
        ],
        'listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet' => [
            'application/json',
        ],
        'plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet' => [
            'application/json',
        ],
        'publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost' => [
            'application/json',
        ],
        'retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet' => [
            'application/json',
        ],
        'updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch' => [
            'application/json',
        ],
        'updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch' => [
            'application/json',
        ],
        'updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch' => [
            'application/json',
        ],
        'validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost
     *
     * Activate A Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost(
        int $workflow_id,
        string $contentType = self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'][0]
    ): mixed
    {
        list($response) = $this->activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostWithHttpInfo
     *
     * Activate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'][0]
    ): array
    {
        $request = $this->activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostAsync
     *
     * Activate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'][0]
    ): PromiseInterface
    {
        return $this->activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostAsyncWithHttpInfo
     *
     * Activate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePostRequest(
        $workflow_id,
        string $contentType = self::contentTypes['activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling activateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdActivatePost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost
     *
     * Create Workflow Step
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepRequest $step_request step_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost(
        int $workflow_id,
        \OpenAPI\Client\Model\StepRequest $step_request,
        string $contentType = self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'][0]
    ): \OpenAPI\Client\Model\StepResponse
    {
        list($response) = $this->createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostWithHttpInfo($workflow_id, $step_request, $contentType);
        return $response;
    }

    /**
     * Operation createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostWithHttpInfo
     *
     * Create Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepRequest $step_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostWithHttpInfo(
        int $workflow_id,
        \OpenAPI\Client\Model\StepRequest $step_request,
        string $contentType = self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'][0]
    ): array
    {
        $request = $this->createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostRequest($workflow_id, $step_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\StepResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StepResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StepResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StepResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StepResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostAsync
     *
     * Create Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepRequest $step_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostAsync(
        int $workflow_id,
        \OpenAPI\Client\Model\StepRequest $step_request,
        string $contentType = self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'][0]
    ): PromiseInterface
    {
        return $this->createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostAsyncWithHttpInfo($workflow_id, $step_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostAsyncWithHttpInfo
     *
     * Create Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepRequest $step_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostAsyncWithHttpInfo(
        $workflow_id,
        $step_request,
        string $contentType = self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\StepResponse';
        $request = $this->createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostRequest($workflow_id, $step_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepRequest $step_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPostRequest(
        $workflow_id,
        $step_request,
        string $contentType = self::contentTypes['createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'
            );
        }

        // verify the required parameter 'step_request' is set
        if ($step_request === null || (is_array($step_request) && count($step_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $step_request when calling createWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsPost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/steps/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($step_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($step_request));
            } else {
                $httpBody = $step_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost
     *
     * Create Workflow Transition
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionRequest $transition_request transition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost(
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionRequest $transition_request,
        string $contentType = self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'][0]
    ): \OpenAPI\Client\Model\TransitionResponse
    {
        list($response) = $this->createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostWithHttpInfo($workflow_id, $transition_request, $contentType);
        return $response;
    }

    /**
     * Operation createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostWithHttpInfo
     *
     * Create Workflow Transition
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionRequest $transition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostWithHttpInfo(
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionRequest $transition_request,
        string $contentType = self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'][0]
    ): array
    {
        $request = $this->createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostRequest($workflow_id, $transition_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\TransitionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransitionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransitionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostAsync
     *
     * Create Workflow Transition
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionRequest $transition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostAsync(
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionRequest $transition_request,
        string $contentType = self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'][0]
    ): PromiseInterface
    {
        return $this->createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostAsyncWithHttpInfo($workflow_id, $transition_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostAsyncWithHttpInfo
     *
     * Create Workflow Transition
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionRequest $transition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostAsyncWithHttpInfo(
        $workflow_id,
        $transition_request,
        string $contentType = self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransitionResponse';
        $request = $this->createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostRequest($workflow_id, $transition_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionRequest $transition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPostRequest(
        $workflow_id,
        $transition_request,
        string $contentType = self::contentTypes['createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'
            );
        }

        // verify the required parameter 'transition_request' is set
        if ($transition_request === null || (is_array($transition_request) && count($transition_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_request when calling createWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsPost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/transitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transition_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transition_request));
            } else {
                $httpBody = $transition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkflowWorkflowsApiV1WorkflowsPost
     *
     * Create Workflow
     *
     * @param  \OpenAPI\Client\Model\WorkflowRequest $workflow_request workflow_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createWorkflowWorkflowsApiV1WorkflowsPost(
        \OpenAPI\Client\Model\WorkflowRequest $workflow_request,
        string $contentType = self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'][0]
    ): \OpenAPI\Client\Model\WorkflowResponse
    {
        list($response) = $this->createWorkflowWorkflowsApiV1WorkflowsPostWithHttpInfo($workflow_request, $contentType);
        return $response;
    }

    /**
     * Operation createWorkflowWorkflowsApiV1WorkflowsPostWithHttpInfo
     *
     * Create Workflow
     *
     * @param  \OpenAPI\Client\Model\WorkflowRequest $workflow_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkflowWorkflowsApiV1WorkflowsPostWithHttpInfo(
        \OpenAPI\Client\Model\WorkflowRequest $workflow_request,
        string $contentType = self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'][0]
    ): array
    {
        $request = $this->createWorkflowWorkflowsApiV1WorkflowsPostRequest($workflow_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkflowWorkflowsApiV1WorkflowsPostAsync
     *
     * Create Workflow
     *
     * @param  \OpenAPI\Client\Model\WorkflowRequest $workflow_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowWorkflowsApiV1WorkflowsPostAsync(
        \OpenAPI\Client\Model\WorkflowRequest $workflow_request,
        string $contentType = self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'][0]
    ): PromiseInterface
    {
        return $this->createWorkflowWorkflowsApiV1WorkflowsPostAsyncWithHttpInfo($workflow_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWorkflowWorkflowsApiV1WorkflowsPostAsyncWithHttpInfo
     *
     * Create Workflow
     *
     * @param  \OpenAPI\Client\Model\WorkflowRequest $workflow_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWorkflowWorkflowsApiV1WorkflowsPostAsyncWithHttpInfo(
        $workflow_request,
        string $contentType = self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
        $request = $this->createWorkflowWorkflowsApiV1WorkflowsPostRequest($workflow_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWorkflowWorkflowsApiV1WorkflowsPost'
     *
     * @param  \OpenAPI\Client\Model\WorkflowRequest $workflow_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWorkflowWorkflowsApiV1WorkflowsPostRequest(
        $workflow_request,
        string $contentType = self::contentTypes['createWorkflowWorkflowsApiV1WorkflowsPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_request' is set
        if ($workflow_request === null || (is_array($workflow_request) && count($workflow_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_request when calling createWorkflowWorkflowsApiV1WorkflowsPost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($workflow_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($workflow_request));
            } else {
                $httpBody = $workflow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete
     *
     * Delete Workflow Step
     *
     * @param  int $step_id step_id (required)
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete(
        int $step_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'][0]
    ): void
    {
        $this->deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteWithHttpInfo($step_id, $workflow_id, $contentType);
    }

    /**
     * Operation deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteWithHttpInfo
     *
     * Delete Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteWithHttpInfo(
        int $step_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'][0]
    ): array
    {
        $request = $this->deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteRequest($step_id, $workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteAsync
     *
     * Delete Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteAsync(
        int $step_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'][0]
    ): PromiseInterface
    {
        return $this->deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteAsyncWithHttpInfo($step_id, $workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteAsyncWithHttpInfo
     *
     * Delete Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteAsyncWithHttpInfo(
        $step_id,
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteRequest($step_id, $workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDeleteRequest(
        $step_id,
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $step_id when calling deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'
            );
        }

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling deleteWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdDelete'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/steps/{step_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'step_id' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete
     *
     * Delete Workflow Transition
     *
     * @param  int $transition_id transition_id (required)
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'][0]
    ): void
    {
        $this->deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteWithHttpInfo($transition_id, $workflow_id, $contentType);
    }

    /**
     * Operation deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteWithHttpInfo
     *
     * Delete Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteWithHttpInfo(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'][0]
    ): array
    {
        $request = $this->deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteRequest($transition_id, $workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteAsync
     *
     * Delete Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteAsync(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'][0]
    ): PromiseInterface
    {
        return $this->deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteAsyncWithHttpInfo($transition_id, $workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteAsyncWithHttpInfo
     *
     * Delete Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteAsyncWithHttpInfo(
        $transition_id,
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteRequest($transition_id, $workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDeleteRequest(
        $transition_id,
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'transition_id' is set
        if ($transition_id === null || (is_array($transition_id) && count($transition_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_id when calling deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'
            );
        }

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling deleteWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdDelete'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/transitions/{transition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transition_id' . '}',
                ObjectSerializer::toPathValue($transition_id),
                $resourcePath
            );
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete
     *
     * Delete Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete(
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'][0]
    ): void
    {
        $this->deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteWithHttpInfo($workflow_id, $contentType);
    }

    /**
     * Operation deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteWithHttpInfo
     *
     * Delete Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'][0]
    ): array
    {
        $request = $this->deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteAsync
     *
     * Delete Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'][0]
    ): PromiseInterface
    {
        return $this->deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteAsyncWithHttpInfo
     *
     * Delete Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDeleteRequest(
        $workflow_id,
        string $contentType = self::contentTypes['deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling deleteWorkflowWorkflowsApiV1WorkflowsWorkflowIdDelete'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet
     *
     * Export Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet(
        int $workflow_id,
        string $contentType = self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'][0]
    ): mixed
    {
        list($response) = $this->exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetWithHttpInfo
     *
     * Export Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'][0]
    ): array
    {
        $request = $this->exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetAsync
     *
     * Export Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'][0]
    ): PromiseInterface
    {
        return $this->exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetAsyncWithHttpInfo
     *
     * Export Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGetRequest(
        $workflow_id,
        string $contentType = self::contentTypes['exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling exportWorkflowWorkflowsApiV1WorkflowsExportWorkflowIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/export/{workflow_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost
     *
     * Fork A Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost(
        int $workflow_id,
        string $contentType = self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'][0]
    ): \OpenAPI\Client\Model\WorkflowResponse
    {
        list($response) = $this->forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostWithHttpInfo
     *
     * Fork A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'][0]
    ): array
    {
        $request = $this->forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostAsync
     *
     * Fork A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'][0]
    ): PromiseInterface
    {
        return $this->forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostAsyncWithHttpInfo
     *
     * Fork A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
        $request = $this->forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPostRequest(
        $workflow_id,
        string $contentType = self::contentTypes['forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling forkAWorkflowWorkflowsApiV1WorkflowsWorkflowIdForkPost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/fork';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet
     *
     * Get Workflow Step
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  int $step_id step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet(
        int $workflow_id,
        int $step_id,
        string $contentType = self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'][0]
    ): \OpenAPI\Client\Model\StepResponse
    {
        list($response) = $this->getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetWithHttpInfo($workflow_id, $step_id, $contentType);
        return $response;
    }

    /**
     * Operation getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetWithHttpInfo
     *
     * Get Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  int $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetWithHttpInfo(
        int $workflow_id,
        int $step_id,
        string $contentType = self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'][0]
    ): array
    {
        $request = $this->getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetRequest($workflow_id, $step_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\StepResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StepResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StepResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StepResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StepResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetAsync
     *
     * Get Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  int $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetAsync(
        int $workflow_id,
        int $step_id,
        string $contentType = self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'][0]
    ): PromiseInterface
    {
        return $this->getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetAsyncWithHttpInfo($workflow_id, $step_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetAsyncWithHttpInfo
     *
     * Get Workflow Step
     *
     * @param  int $workflow_id (required)
     * @param  int $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetAsyncWithHttpInfo(
        $workflow_id,
        $step_id,
        string $contentType = self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\StepResponse';
        $request = $this->getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetRequest($workflow_id, $step_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'
     *
     * @param  int $workflow_id (required)
     * @param  int $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGetRequest(
        $workflow_id,
        $step_id,
        string $contentType = self::contentTypes['getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $step_id when calling getWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/steps/{step_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'step_id' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet
     *
     * Get Workflow Transition
     *
     * @param  int $transition_id transition_id (required)
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'][0]
    ): \OpenAPI\Client\Model\TransitionResponse
    {
        list($response) = $this->getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetWithHttpInfo($transition_id, $workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetWithHttpInfo
     *
     * Get Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetWithHttpInfo(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'][0]
    ): array
    {
        $request = $this->getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetRequest($transition_id, $workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\TransitionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransitionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransitionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetAsync
     *
     * Get Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetAsync(
        int $transition_id,
        int $workflow_id,
        string $contentType = self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'][0]
    ): PromiseInterface
    {
        return $this->getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetAsyncWithHttpInfo($transition_id, $workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetAsyncWithHttpInfo
     *
     * Get Workflow Transition
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetAsyncWithHttpInfo(
        $transition_id,
        $workflow_id,
        string $contentType = self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransitionResponse';
        $request = $this->getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetRequest($transition_id, $workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGetRequest(
        $transition_id,
        $workflow_id,
        string $contentType = self::contentTypes['getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'][0]
    ): Request
    {

        // verify the required parameter 'transition_id' is set
        if ($transition_id === null || (is_array($transition_id) && count($transition_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_id when calling getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'
            );
        }

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling getWorkflowTransitionWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/transitions/{transition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transition_id' . '}',
                ObjectSerializer::toPathValue($transition_id),
                $resourcePath
            );
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importWorkflowWorkflowsApiV1WorkflowsImportPost
     *
     * Import Workflow
     *
     * @param  \SplFileObject $workflow_file workflow_file (required)
     * @param  string|null $name name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function importWorkflowWorkflowsApiV1WorkflowsImportPost(
        \SplFileObject $workflow_file,
        ?string $name = null,
        string $contentType = self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'][0]
    ): \OpenAPI\Client\Model\WorkflowResponse
    {
        list($response) = $this->importWorkflowWorkflowsApiV1WorkflowsImportPostWithHttpInfo($workflow_file, $name, $contentType);
        return $response;
    }

    /**
     * Operation importWorkflowWorkflowsApiV1WorkflowsImportPostWithHttpInfo
     *
     * Import Workflow
     *
     * @param  \SplFileObject $workflow_file (required)
     * @param  string|null $name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function importWorkflowWorkflowsApiV1WorkflowsImportPostWithHttpInfo(
        \SplFileObject $workflow_file,
        ?string $name = null,
        string $contentType = self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'][0]
    ): array
    {
        $request = $this->importWorkflowWorkflowsApiV1WorkflowsImportPostRequest($workflow_file, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importWorkflowWorkflowsApiV1WorkflowsImportPostAsync
     *
     * Import Workflow
     *
     * @param  \SplFileObject $workflow_file (required)
     * @param  string|null $name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importWorkflowWorkflowsApiV1WorkflowsImportPostAsync(
        \SplFileObject $workflow_file,
        ?string $name = null,
        string $contentType = self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'][0]
    ): PromiseInterface
    {
        return $this->importWorkflowWorkflowsApiV1WorkflowsImportPostAsyncWithHttpInfo($workflow_file, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importWorkflowWorkflowsApiV1WorkflowsImportPostAsyncWithHttpInfo
     *
     * Import Workflow
     *
     * @param  \SplFileObject $workflow_file (required)
     * @param  string|null $name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importWorkflowWorkflowsApiV1WorkflowsImportPostAsyncWithHttpInfo(
        $workflow_file,
        $name = null,
        string $contentType = self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
        $request = $this->importWorkflowWorkflowsApiV1WorkflowsImportPostRequest($workflow_file, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importWorkflowWorkflowsApiV1WorkflowsImportPost'
     *
     * @param  \SplFileObject $workflow_file (required)
     * @param  string|null $name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importWorkflowWorkflowsApiV1WorkflowsImportPostRequest(
        $workflow_file,
        $name = null,
        string $contentType = self::contentTypes['importWorkflowWorkflowsApiV1WorkflowsImportPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_file' is set
        if ($workflow_file === null || (is_array($workflow_file) && count($workflow_file) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_file when calling importWorkflowWorkflowsApiV1WorkflowsImportPost'
            );
        }



        $resourcePath = '/workflows/api/v1/workflows/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($workflow_file !== null) {
            $multipart = true;
            $formParams['workflow_file'] = [];
            $paramFiles = is_array($workflow_file) ? $workflow_file : [$workflow_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['workflow_file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllActionsWorkflowsApiV1WorkflowsActionsGet
     *
     * List All Actions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ActionResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listAllActionsWorkflowsApiV1WorkflowsActionsGet(
        string $contentType = self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'][0]
    ): array
    {
        list($response) = $this->listAllActionsWorkflowsApiV1WorkflowsActionsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listAllActionsWorkflowsApiV1WorkflowsActionsGetWithHttpInfo
     *
     * List All Actions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ActionResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllActionsWorkflowsApiV1WorkflowsActionsGetWithHttpInfo(
        string $contentType = self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'][0]
    ): array
    {
        $request = $this->listAllActionsWorkflowsApiV1WorkflowsActionsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\ActionResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ActionResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ActionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ActionResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ActionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllActionsWorkflowsApiV1WorkflowsActionsGetAsync
     *
     * List All Actions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllActionsWorkflowsApiV1WorkflowsActionsGetAsync(
        string $contentType = self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'][0]
    ): PromiseInterface
    {
        return $this->listAllActionsWorkflowsApiV1WorkflowsActionsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllActionsWorkflowsApiV1WorkflowsActionsGetAsyncWithHttpInfo
     *
     * List All Actions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllActionsWorkflowsApiV1WorkflowsActionsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ActionResponse[]';
        $request = $this->listAllActionsWorkflowsApiV1WorkflowsActionsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllActionsWorkflowsApiV1WorkflowsActionsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllActionsWorkflowsApiV1WorkflowsActionsGetRequest(
        string $contentType = self::contentTypes['listAllActionsWorkflowsApiV1WorkflowsActionsGet'][0]
    ): Request
    {


        $resourcePath = '/workflows/api/v1/workflows/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet
     *
     * List All Workflows By Uuid
     *
     * @param  string|null $name name (optional)
     * @param  string|null $uuid uuid (optional)
     * @param  bool|null $sort_desc sort_desc (optional)
     * @param  int|null $limit limit (optional, default to 100)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowByUUIDResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet(
        ?string $name = null,
        ?string $uuid = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'][0]
    ): array
    {
        list($response) = $this->listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetWithHttpInfo($name, $uuid, $sort_desc, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetWithHttpInfo
     *
     * List All Workflows By Uuid
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowByUUIDResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetWithHttpInfo(
        ?string $name = null,
        ?string $uuid = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'][0]
    ): array
    {
        $request = $this->listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetRequest($name, $uuid, $sort_desc, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowByUUIDResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowByUUIDResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowByUUIDResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowByUUIDResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowByUUIDResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetAsync
     *
     * List All Workflows By Uuid
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetAsync(
        ?string $name = null,
        ?string $uuid = null,
        ?bool $sort_desc = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'][0]
    ): PromiseInterface
    {
        return $this->listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetAsyncWithHttpInfo($name, $uuid, $sort_desc, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetAsyncWithHttpInfo
     *
     * List All Workflows By Uuid
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetAsyncWithHttpInfo(
        $name = null,
        $uuid = null,
        $sort_desc = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowByUUIDResponse[]';
        $request = $this->listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetRequest($name, $uuid, $sort_desc, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  bool|null $sort_desc (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGetRequest(
        $name = null,
        $uuid = null,
        $sort_desc = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet'][0]
    ): Request
    {





        if ($offset !== null && $offset < 0) {
            throw new InvalidArgumentException('invalid value for "$offset" when calling WorkflowsDefinitionApi.listAllWorkflowsByUuidWorkflowsApiV1WorkflowsByUuidGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/workflows/api/v1/workflows/by-uuid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uuid,
            'uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_desc,
            'sort_desc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllWorkflowsWorkflowsApiV1WorkflowsGet
     *
     * List All Workflows
     *
     * @param  string|null $name name (optional)
     * @param  string|null $uuid uuid (optional)
     * @param  WorkflowStatus|null $status status (optional)
     * @param  int|null $limit limit (optional, default to 100)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listAllWorkflowsWorkflowsApiV1WorkflowsGet(
        ?string $name = null,
        ?string $uuid = null,
        ?WorkflowStatus $status = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'][0]
    ): array
    {
        list($response) = $this->listAllWorkflowsWorkflowsApiV1WorkflowsGetWithHttpInfo($name, $uuid, $status, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listAllWorkflowsWorkflowsApiV1WorkflowsGetWithHttpInfo
     *
     * List All Workflows
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  WorkflowStatus|null $status (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllWorkflowsWorkflowsApiV1WorkflowsGetWithHttpInfo(
        ?string $name = null,
        ?string $uuid = null,
        ?WorkflowStatus $status = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'][0]
    ): array
    {
        $request = $this->listAllWorkflowsWorkflowsApiV1WorkflowsGetRequest($name, $uuid, $status, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllWorkflowsWorkflowsApiV1WorkflowsGetAsync
     *
     * List All Workflows
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  WorkflowStatus|null $status (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllWorkflowsWorkflowsApiV1WorkflowsGetAsync(
        ?string $name = null,
        ?string $uuid = null,
        ?WorkflowStatus $status = null,
        ?int $limit = 100,
        ?int $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'][0]
    ): PromiseInterface
    {
        return $this->listAllWorkflowsWorkflowsApiV1WorkflowsGetAsyncWithHttpInfo($name, $uuid, $status, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllWorkflowsWorkflowsApiV1WorkflowsGetAsyncWithHttpInfo
     *
     * List All Workflows
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  WorkflowStatus|null $status (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAllWorkflowsWorkflowsApiV1WorkflowsGetAsyncWithHttpInfo(
        $name = null,
        $uuid = null,
        $status = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse[]';
        $request = $this->listAllWorkflowsWorkflowsApiV1WorkflowsGetRequest($name, $uuid, $status, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllWorkflowsWorkflowsApiV1WorkflowsGet'
     *
     * @param  string|null $name (optional)
     * @param  string|null $uuid (optional)
     * @param  WorkflowStatus|null $status (optional)
     * @param  int|null $limit (optional, default to 100)
     * @param  int|null $offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllWorkflowsWorkflowsApiV1WorkflowsGetRequest(
        $name = null,
        $uuid = null,
        $status = null,
        $limit = 100,
        $offset = 0,
        string $contentType = self::contentTypes['listAllWorkflowsWorkflowsApiV1WorkflowsGet'][0]
    ): Request
    {





        if ($offset !== null && $offset < 0) {
            throw new InvalidArgumentException('invalid value for "$offset" when calling WorkflowsDefinitionApi.listAllWorkflowsWorkflowsApiV1WorkflowsGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/workflows/api/v1/workflows/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uuid,
            'uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'WorkflowStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet
     *
     * List Workflow Steps
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string|null $action action (optional)
     * @param  bool|null $python python (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\StepResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet(
        int $workflow_id,
        ?string $action = null,
        ?bool $python = false,
        string $contentType = self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'][0]
    ): array
    {
        list($response) = $this->listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetWithHttpInfo($workflow_id, $action, $python, $contentType);
        return $response;
    }

    /**
     * Operation listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetWithHttpInfo
     *
     * List Workflow Steps
     *
     * @param  int $workflow_id (required)
     * @param  string|null $action (optional)
     * @param  bool|null $python (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StepResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetWithHttpInfo(
        int $workflow_id,
        ?string $action = null,
        ?bool $python = false,
        string $contentType = self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'][0]
    ): array
    {
        $request = $this->listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetRequest($workflow_id, $action, $python, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\StepResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StepResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StepResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StepResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StepResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetAsync
     *
     * List Workflow Steps
     *
     * @param  int $workflow_id (required)
     * @param  string|null $action (optional)
     * @param  bool|null $python (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetAsync(
        int $workflow_id,
        ?string $action = null,
        ?bool $python = false,
        string $contentType = self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'][0]
    ): PromiseInterface
    {
        return $this->listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetAsyncWithHttpInfo($workflow_id, $action, $python, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetAsyncWithHttpInfo
     *
     * List Workflow Steps
     *
     * @param  int $workflow_id (required)
     * @param  string|null $action (optional)
     * @param  bool|null $python (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetAsyncWithHttpInfo(
        $workflow_id,
        $action = null,
        $python = false,
        string $contentType = self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\StepResponse[]';
        $request = $this->listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetRequest($workflow_id, $action, $python, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'
     *
     * @param  int $workflow_id (required)
     * @param  string|null $action (optional)
     * @param  bool|null $python (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGetRequest(
        $workflow_id,
        $action = null,
        $python = false,
        string $contentType = self::contentTypes['listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling listWorkflowStepsWorkflowsApiV1WorkflowsWorkflowIdStepsGet'
            );
        }




        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/steps/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $python,
            'python', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet
     *
     * List Workflow Transitions
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransitionResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet(
        int $workflow_id,
        string $contentType = self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'][0]
    ): array
    {
        list($response) = $this->listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetWithHttpInfo
     *
     * List Workflow Transitions
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransitionResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'][0]
    ): array
    {
        $request = $this->listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\TransitionResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransitionResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransitionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransitionResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransitionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetAsync
     *
     * List Workflow Transitions
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'][0]
    ): PromiseInterface
    {
        return $this->listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetAsyncWithHttpInfo
     *
     * List Workflow Transitions
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransitionResponse[]';
        $request = $this->listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGetRequest(
        $workflow_id,
        string $contentType = self::contentTypes['listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling listWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsGet'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/transitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet
     *
     * Plot Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string|null $direction direction (optional, default to 'TB')
     * @param  string|null $format format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet(
        int $workflow_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'][0]
    ): mixed
    {
        list($response) = $this->plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetWithHttpInfo($workflow_id, $direction, $format, $contentType);
        return $response;
    }

    /**
     * Operation plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetWithHttpInfo
     *
     * Plot Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetWithHttpInfo(
        int $workflow_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'][0]
    ): array
    {
        $request = $this->plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetRequest($workflow_id, $direction, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetAsync
     *
     * Plot Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetAsync(
        int $workflow_id,
        ?string $direction = 'TB',
        ?string $format = 'png',
        string $contentType = self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'][0]
    ): PromiseInterface
    {
        return $this->plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetAsyncWithHttpInfo($workflow_id, $direction, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetAsyncWithHttpInfo
     *
     * Plot Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetAsyncWithHttpInfo(
        $workflow_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetRequest($workflow_id, $direction, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'
     *
     * @param  int $workflow_id (required)
     * @param  string|null $direction (optional, default to 'TB')
     * @param  string|null $format (optional, default to 'png')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGetRequest(
        $workflow_id,
        $direction = 'TB',
        $format = 'png',
        string $contentType = self::contentTypes['plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling plotWorkflowWorkflowsApiV1WorkflowsWorkflowIdPlotGet'
            );
        }




        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/plot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost
     *
     * Publish A Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost(
        int $workflow_id,
        string $contentType = self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'][0]
    ): mixed
    {
        list($response) = $this->publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostWithHttpInfo
     *
     * Publish A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'][0]
    ): array
    {
        $request = $this->publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostAsync
     *
     * Publish A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'][0]
    ): PromiseInterface
    {
        return $this->publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostAsyncWithHttpInfo
     *
     * Publish A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPostRequest(
        $workflow_id,
        string $contentType = self::contentTypes['publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling publishAWorkflowWorkflowsApiV1WorkflowsWorkflowIdPublishPost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet
     *
     * Retrieve Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet(
        int $workflow_id,
        string $contentType = self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'][0]
    ): \OpenAPI\Client\Model\WorkflowResponse
    {
        list($response) = $this->retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetWithHttpInfo
     *
     * Retrieve Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'][0]
    ): array
    {
        $request = $this->retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetAsync
     *
     * Retrieve Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'][0]
    ): PromiseInterface
    {
        return $this->retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetAsyncWithHttpInfo
     *
     * Retrieve Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
        $request = $this->retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGetRequest(
        $workflow_id,
        string $contentType = self::contentTypes['retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling retrieveWorkflowWorkflowsApiV1WorkflowsWorkflowIdGet'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch
     *
     * Update Workflow Step
     *
     * @param  int $step_id step_id (required)
     * @param  int $workflow_id workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepPartialRequest $step_partial_request step_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch(
        int $step_id,
        int $workflow_id,
        \OpenAPI\Client\Model\StepPartialRequest $step_partial_request,
        string $contentType = self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'][0]
    ): \OpenAPI\Client\Model\StepResponse
    {
        list($response) = $this->updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchWithHttpInfo($step_id, $workflow_id, $step_partial_request, $contentType);
        return $response;
    }

    /**
     * Operation updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchWithHttpInfo
     *
     * Update Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepPartialRequest $step_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StepResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchWithHttpInfo(
        int $step_id,
        int $workflow_id,
        \OpenAPI\Client\Model\StepPartialRequest $step_partial_request,
        string $contentType = self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'][0]
    ): array
    {
        $request = $this->updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchRequest($step_id, $workflow_id, $step_partial_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\StepResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StepResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StepResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StepResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StepResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchAsync
     *
     * Update Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepPartialRequest $step_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchAsync(
        int $step_id,
        int $workflow_id,
        \OpenAPI\Client\Model\StepPartialRequest $step_partial_request,
        string $contentType = self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'][0]
    ): PromiseInterface
    {
        return $this->updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchAsyncWithHttpInfo($step_id, $workflow_id, $step_partial_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchAsyncWithHttpInfo
     *
     * Update Workflow Step
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepPartialRequest $step_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchAsyncWithHttpInfo(
        $step_id,
        $workflow_id,
        $step_partial_request,
        string $contentType = self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\StepResponse';
        $request = $this->updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchRequest($step_id, $workflow_id, $step_partial_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'
     *
     * @param  int $step_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\StepPartialRequest $step_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatchRequest(
        $step_id,
        $workflow_id,
        $step_partial_request,
        string $contentType = self::contentTypes['updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'][0]
    ): Request
    {

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $step_id when calling updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'
            );
        }

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'
            );
        }

        // verify the required parameter 'step_partial_request' is set
        if ($step_partial_request === null || (is_array($step_partial_request) && count($step_partial_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $step_partial_request when calling updateWorkflowStepWorkflowsApiV1WorkflowsWorkflowIdStepsStepIdPatch'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/steps/{step_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'step_id' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($step_partial_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($step_partial_request));
            } else {
                $httpBody = $step_partial_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch
     *
     * Update Workflow Transitions
     *
     * @param  int $transition_id transition_id (required)
     * @param  int $workflow_id workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request transition_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch(
        int $transition_id,
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request,
        string $contentType = self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'][0]
    ): \OpenAPI\Client\Model\TransitionResponse
    {
        list($response) = $this->updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchWithHttpInfo($transition_id, $workflow_id, $transition_partial_request, $contentType);
        return $response;
    }

    /**
     * Operation updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchWithHttpInfo
     *
     * Update Workflow Transitions
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransitionResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchWithHttpInfo(
        int $transition_id,
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request,
        string $contentType = self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'][0]
    ): array
    {
        $request = $this->updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchRequest($transition_id, $workflow_id, $transition_partial_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\TransitionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransitionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransitionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchAsync
     *
     * Update Workflow Transitions
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchAsync(
        int $transition_id,
        int $workflow_id,
        \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request,
        string $contentType = self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'][0]
    ): PromiseInterface
    {
        return $this->updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchAsyncWithHttpInfo($transition_id, $workflow_id, $transition_partial_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchAsyncWithHttpInfo
     *
     * Update Workflow Transitions
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchAsyncWithHttpInfo(
        $transition_id,
        $workflow_id,
        $transition_partial_request,
        string $contentType = self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransitionResponse';
        $request = $this->updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchRequest($transition_id, $workflow_id, $transition_partial_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'
     *
     * @param  int $transition_id (required)
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\TransitionPartialRequest $transition_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatchRequest(
        $transition_id,
        $workflow_id,
        $transition_partial_request,
        string $contentType = self::contentTypes['updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'][0]
    ): Request
    {

        // verify the required parameter 'transition_id' is set
        if ($transition_id === null || (is_array($transition_id) && count($transition_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_id when calling updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'
            );
        }

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'
            );
        }

        // verify the required parameter 'transition_partial_request' is set
        if ($transition_partial_request === null || (is_array($transition_partial_request) && count($transition_partial_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transition_partial_request when calling updateWorkflowTransitionsWorkflowsApiV1WorkflowsWorkflowIdTransitionsTransitionIdPatch'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/transitions/{transition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transition_id' . '}',
                ObjectSerializer::toPathValue($transition_id),
                $resourcePath
            );
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transition_partial_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transition_partial_request));
            } else {
                $httpBody = $transition_partial_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch
     *
     * Update Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request workflow_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch(
        int $workflow_id,
        \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request,
        string $contentType = self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'][0]
    ): \OpenAPI\Client\Model\WorkflowResponse
    {
        list($response) = $this->updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchWithHttpInfo($workflow_id, $workflow_partial_request, $contentType);
        return $response;
    }

    /**
     * Operation updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchWithHttpInfo
     *
     * Update Workflow
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchWithHttpInfo(
        int $workflow_id,
        \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request,
        string $contentType = self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'][0]
    ): array
    {
        $request = $this->updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchRequest($workflow_id, $workflow_partial_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchAsync
     *
     * Update Workflow
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchAsync(
        int $workflow_id,
        \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request,
        string $contentType = self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'][0]
    ): PromiseInterface
    {
        return $this->updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchAsyncWithHttpInfo($workflow_id, $workflow_partial_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchAsyncWithHttpInfo
     *
     * Update Workflow
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchAsyncWithHttpInfo(
        $workflow_id,
        $workflow_partial_request,
        string $contentType = self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowResponse';
        $request = $this->updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchRequest($workflow_id, $workflow_partial_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'
     *
     * @param  int $workflow_id (required)
     * @param  \OpenAPI\Client\Model\WorkflowPartialRequest $workflow_partial_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatchRequest(
        $workflow_id,
        $workflow_partial_request,
        string $contentType = self::contentTypes['updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'
            );
        }

        // verify the required parameter 'workflow_partial_request' is set
        if ($workflow_partial_request === null || (is_array($workflow_partial_request) && count($workflow_partial_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_partial_request when calling updateWorkflowWorkflowsApiV1WorkflowsWorkflowIdPatch'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($workflow_partial_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($workflow_partial_request));
            } else {
                $httpBody = $workflow_partial_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost
     *
     * Validate A Workflow
     *
     * @param  int $workflow_id workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WorkflowValidityResponse[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost(
        int $workflow_id,
        string $contentType = self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'][0]
    ): array
    {
        list($response) = $this->validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostWithHttpInfo($workflow_id, $contentType);
        return $response;
    }

    /**
     * Operation validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostWithHttpInfo
     *
     * Validate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WorkflowValidityResponse[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostWithHttpInfo(
        int $workflow_id,
        string $contentType = self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'][0]
    ): array
    {
        $request = $this->validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostRequest($workflow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\WorkflowValidityResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WorkflowValidityResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WorkflowValidityResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\OpenAPI\Client\Model\HTTPValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WorkflowValidityResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WorkflowValidityResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostAsync
     *
     * Validate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostAsync(
        int $workflow_id,
        string $contentType = self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'][0]
    ): PromiseInterface
    {
        return $this->validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostAsyncWithHttpInfo($workflow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostAsyncWithHttpInfo
     *
     * Validate A Workflow
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostAsyncWithHttpInfo(
        $workflow_id,
        string $contentType = self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WorkflowValidityResponse[]';
        $request = $this->validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostRequest($workflow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'
     *
     * @param  int $workflow_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePostRequest(
        $workflow_id,
        string $contentType = self::contentTypes['validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'][0]
    ): Request
    {

        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null || (is_array($workflow_id) && count($workflow_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $workflow_id when calling validateAWorkflowWorkflowsApiV1WorkflowsWorkflowIdValidatePost'
            );
        }


        $resourcePath = '/workflows/api/v1/workflows/{workflow_id}/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workflow_id' . '}',
                ObjectSerializer::toPathValue($workflow_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
